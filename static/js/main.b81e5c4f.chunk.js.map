{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","initialSatate","query","status","filterReducer","todosReducer","rootReducer","combineReducers","currentTodo","filter","todos","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","selectedTodo","visibleTodos","useMemo","todosVis","queryForVisible","statusForVisible","newQuery","toLowerCase","trim","title","includes","completed","getVisibleTodos","length","className","map","id","classNames","onClick","setSelectionTodo","TodoFilter","onSubmit","event","preventDefault","value","onChange","filteAction","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","isLoad","setIsLoad","useEffect","userId","finally","curentActions","href","email","name","App","setTodos","todoActions","catch","error","Error","message","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b81e5c4f.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (state: State = null, action: Action): State => {\n  switch (action.type) {\n    case 'currentTodo/REMOVE':\n      return null;\n    case 'currentTodo/SET':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = {\n  type: 'filter/SET_QUERY';\n  payload: string;\n};\n\ntype SetStatusAction = {\n  type: 'filter/SET_STATUS';\n  payload: Status;\n};\n\ntype FilterAction = SetQueryAction | SetStatusAction;\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\nconst setStataus = (status: Status): SetStatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\ntype FilterState = {\n  query: string;\n  status: Status;\n};\n\nconst initialSatate: FilterState = {\n  query: '',\n  status: 'all',\n};\n\nexport const actions = { setQuery, setStataus };\n\nconst filterReducer = (\n  state = initialSatate,\n  action: FilterAction,\n):FilterState => {\n  switch (action.type) {\n    case 'filter/SET_STATUS':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    case 'filter/SET_QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type:'todos/set';\n  payload : Todo[];\n};\n\nconst setTodos = (todo:Todo[]): SetTodosAction => ({\n  type: 'todos/set',\n  payload: todo,\n\n});\n\nexport const actions = { setTodos };\n\nconst todosReducer = (todo : Todo[] = [], action:SetTodosAction): Todo[] => {\n  switch (action.type) {\n    case 'todos/set':\n      return action.payload;\n    default:\n      return todo;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React, { useMemo } from 'react';\nimport classNames from 'classnames';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\nimport { Status } from '../../types/Status';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const selectedTodo = useAppSelector((state) => state.currentTodo);\n  const setSelectionTodo = (todo: Todo) => dispatch(actions.setTodo(todo));\n  const { status, query } = useAppSelector((state) => state.filter);\n\n  const getVisibleTodos = (\n    todosVis: Todo[],\n    queryForVisible: string,\n    statusForVisible: Status,\n  ) => {\n    let visibleTodos = [...todosVis];\n    const newQuery = queryForVisible.toLowerCase().trim();\n\n    if (queryForVisible) {\n      visibleTodos = visibleTodos.filter(todo => todo.title.toLowerCase().includes(newQuery));\n    }\n\n    switch (statusForVisible) {\n      case 'all':\n      default:\n        return visibleTodos;\n\n      case 'completed':\n        return visibleTodos.filter(todo => todo.completed);\n\n      case 'active':\n        return visibleTodos.filter(todo => !todo.completed);\n    }\n  };\n\n  const visibleTodos = useMemo(() => {\n    return getVisibleTodos(todos, query, status);\n  }, [todos, query, status]);\n\n  return (\n    <>\n      {visibleTodos.length !== 0 ? (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {visibleTodos.map((todo) => (\n              <tr key={todo.id} data-cy=\"todo\">\n                <td className=\"is-vcentered\">\n                  {todo.id}\n                </td>\n                <td className=\"is-vcentered\">\n                  {todo.completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p className={classNames({\n                    'has-text-danger': !todo.completed,\n                    'has-text-success': todo.completed,\n                  })}\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => setSelectionTodo(todo)}\n                  >\n                    <span className=\"icon\">\n                      <i\n                        className={classNames('far', {\n                          'fa-eye-slash': selectedTodo?.id === todo.id,\n                          'fa-eye': selectedTodo?.id !== todo.id,\n                        })}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filteAction } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const { query, status } = useAppSelector((state) => state.filter);\n  const dispatch = useAppDispatch();\n\n  const changeStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filteAction.setStataus(event.target.value as Status));\n  };\n\n  const queryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(filteAction.setQuery(event.target.value));\n  };\n\n  const resetQuary = () => {\n    dispatch(filteAction.setQuery(''));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={changeStatus}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={queryChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={resetQuary}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\n\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { User } from '../../types/User';\nimport { actions as curentActions } from '../../features/currentTodo';\nimport { getUser } from '../../api';\n\nexport const TodoModal: React.FC = () => {\n  const todo = useAppSelector((state) => state.currentTodo);\n  const dispatch = useAppDispatch();\n  const [user, setUser] = useState<User | null>(null);\n  const closeTodo = () => dispatch(curentActions.removeTodo());\n  const [isLoad, setIsLoad] = useState(false);\n\n  useEffect(() => {\n    setIsLoad(true);\n    if (todo?.userId) {\n      getUser(todo.userId)\n        .then(setUser)\n        .finally(() => setIsLoad(false));\n    }\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoad && <Loader />}\n\n      <div className=\"modal-card\">\n        <header className=\"modal-card-head\">\n          <div\n            className=\"modal-card-title has-text-weight-medium\"\n            data-cy=\"modal-header\"\n          >\n            Todo #\n            {todo?.id}\n          </div>\n\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            type=\"button\"\n            className=\"delete\"\n            data-cy=\"modal-close\"\n            onClick={closeTodo}\n          />\n        </header>\n\n        <div className=\"modal-card-body\">\n          <p className=\"block\" data-cy=\"modal-title\">\n            {todo?.title}\n          </p>\n\n          <p className=\"block\" data-cy=\"modal-user\">\n            {todo?.completed ? (\n              <strong className=\"has-text-success\">\n                Done\n              </strong>\n            ) : (\n              <strong className=\"has-text-danger\">\n                Planned\n              </strong>\n            )}\n            {' by '}\n            <a href={`mailto:${user?.email}`}>{user?.name}</a>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { useEffect, useState } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { Todo } from './types/Todo';\nimport { actions as todoActions } from './features/todos';\nimport { getTodos } from './api';\nimport { TodoModal } from './components/TodoModal';\n\nexport const App: React.FC = () => {\n  const [isLoad, setIsLoad] = useState(false);\n  const dispatch = useAppDispatch();\n  const selectedTodo = useAppSelector((state) => state.currentTodo);\n\n  const setTodos = (todos: Todo[]) => {\n    dispatch(todoActions.setTodos(todos));\n  };\n\n  useEffect(() => {\n    setIsLoad(true);\n\n    getTodos()\n      .then(setTodos)\n      .catch(error => {\n        throw new Error(error.message);\n      })\n      .finally(() => setIsLoad(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoad && <Loader />}\n              <TodoList />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}